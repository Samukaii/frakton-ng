(self.webpackChunkfrakton_ng=self.webpackChunkfrakton_ng||[]).push([[6063],{"./libs/frakton-ng/badge/src/fkt-badge.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/.pnpm/css-loader@7.1.2_webpack@5.101.2_esbuild@0.25.9_/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/.pnpm/css-loader@7.1.2_webpack@5.101.2_esbuild@0.25.9_/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".badge {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: fit-content;\n  width: fit-content;\n  border-radius: var(--radius-md);\n  color: var(--color-neutral-100);\n  gap: var(--space-xs);\n  padding: var(--space-3xs) var(--space-xs);\n  font-weight: var(--font-semibold);\n  font-size: var(--font-size-sm);\n}\n.badge.badge--opaque.badge--red {\n  background-color: var(--color-red-500);\n}\n.badge.badge--opaque.badge--blue {\n  background-color: var(--color-blue-500);\n}\n.badge.badge--opaque.badge--orange {\n  background-color: var(--color-orange-500);\n}\n.badge.badge--opaque.badge--green {\n  background-color: var(--color-green-500);\n}\n.badge.badge--faded.badge--red {\n  background-color: var(--color-red-200);\n  color: var(--color-neutral-950);\n}\n.badge.badge--faded.badge--blue {\n  background-color: var(--color-blue-200);\n  color: var(--color-neutral-950);\n}\n.badge.badge--faded.badge--orange {\n  background-color: var(--color-orange-200);\n  color: var(--color-neutral-950);\n}\n.badge.badge--faded.badge--green {\n  background-color: var(--color-green-200);\n  color: var(--color-neutral-950);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/frakton-ng/badge/src/fkt-badge.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{U:()=>FktBadgeComponent});var tslib_es6=__webpack_require__("./node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");var fkt_badge_componentngResource=__webpack_require__("./libs/frakton-ng/badge/src/fkt-badge.component.scss?ngResource"),fkt_badge_componentngResource_default=__webpack_require__.n(fkt_badge_componentngResource),core=__webpack_require__("./node_modules/.pnpm/@angular+core@20.2.3_@angul_c9ee8335d2256103e29db4665678f6ce/node_modules/@angular/core/fesm2022/core.mjs"),resource=__webpack_require__("./node_modules/.pnpm/@angular+core@20.2.3_@angul_c9ee8335d2256103e29db4665678f6ce/node_modules/@angular/core/fesm2022/resource.mjs"),debug_node=__webpack_require__("./node_modules/.pnpm/@angular+core@20.2.3_@angul_c9ee8335d2256103e29db4665678f6ce/node_modules/@angular/core/fesm2022/debug_node.mjs");let FktBadgeComponent=class FktBadgeComponent{text=(0,core.input)();color=core.input.required();variant=(0,core.input)("opaque");classes=(0,resource.EW)(()=>[`badge--${this.color()}`,`badge--${this.variant()}`,"badge"]);static propDecorators={text:[{type:debug_node.pde,args:[{isSignal:!0,alias:"text",required:!1,transform:void 0}]}],color:[{type:debug_node.pde,args:[{isSignal:!0,alias:"color",required:!0,transform:void 0}]}],variant:[{type:debug_node.pde,args:[{isSignal:!0,alias:"variant",required:!1,transform:void 0}]}]}};FktBadgeComponent=(0,tslib_es6.Cg)([(0,debug_node.uAl)({selector:"fkt-badge",imports:[],template:'<div [class]="classes()">\r\n\t<ng-content select="[badge-content]">\r\n\t\t{{ text() }}\r\n\t</ng-content>\r\n</div>\r\n',styles:[fkt_badge_componentngResource_default()]})],FktBadgeComponent)},"./libs/frakton-ng/badge/src/fkt-badge.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BadgeVariations:()=>BadgeVariations,CategoryBadge:()=>CategoryBadge,CountBadge:()=>CountBadge,ErrorBadge:()=>ErrorBadge,InfoBadge:()=>InfoBadge,LongTextBadge:()=>LongTextBadge,PriorityBadge:()=>PriorityBadge,StatusBadge:()=>StatusBadge,SuccessBadge:()=>SuccessBadge,WarningBadge:()=>WarningBadge,__namedExportsOrder:()=>__namedExportsOrder,default:()=>fkt_badge_stories});const meta={title:"Components/Badge",component:__webpack_require__("./libs/frakton-ng/badge/src/fkt-badge.component.ts").U,parameters:{layout:"centered"},argTypes:{text:{control:"text",table:{category:"Attributes",type:{summary:"string"},defaultValue:{summary:"''"}}},variant:{control:"select",options:["opaque","faded"],table:{category:"Attributes",type:{summary:"FktBadgeVariant",detail:"import {FktBadgeVariant} from 'frakton-ng/badge';"},defaultValue:{summary:"opaque"}}},color:{control:"select",options:["green","red","blue","orange"],type:{name:"object",value:{},required:!0},table:{category:"Attributes",type:{summary:"FktBadgeColor",detail:"import {FktBadgeColor} from 'frakton-ng/badge';"}}}}},SuccessBadge={parameters:{docs:{description:{story:"A standard badge with success state and opaque styling, perfect for status indicators."}}},args:{text:"Success",color:"green",variant:"opaque"}},ErrorBadge={parameters:{docs:{description:{story:"Badge showing error state with red color for urgent attention."}}},args:{text:"Error",color:"red",variant:"opaque"}},WarningBadge={parameters:{docs:{description:{story:"Badge with orange color for warnings and pending states that need attention."}}},args:{text:"Warning",color:"orange",variant:"opaque"}},InfoBadge={parameters:{docs:{description:{story:"Badge with blue color for informational content and faded variant for subtle display."}}},args:{text:"Info",color:"blue",variant:"faded"}},BadgeVariations={parameters:{docs:{description:{story:"Comprehensive showcase of all available colors and variants, demonstrating the full range of badge styling options."}}},render:args=>({props:args,styles:["\n            .container {\n                display: flex;\n                flex-direction: column;\n                gap: var(--space-md);\n            }\n\n            .container__item {\n                display: flex;\n                flex-direction: column;\n                gap: var(--space-xs);\n            }\n\n            .container__item h2 {\n                font-size: var(--font-size-lg);\n                font-weight: var(--font-semibold);\n                border-bottom: solid 1px var(--color-gray-200);\n                padding-bottom: var(--space-3xs);\n            }\n\n            .container__item > div {\n                display: flex;\n                align-items: center;\n                gap: var(--space-xs);\n                flex-wrap: wrap;\n            }\n        "],template:'\n            <div class="container">\n                <div class="container__item">\n                    <h2>Opaque Variant</h2>\n                    <div>\n                        <fkt-badge text="Green" [color]="color" variant="opaque" />\n                        <fkt-badge text="Red" color="red" variant="opaque" />\n                        <fkt-badge text="Blue" color="blue" variant="opaque" />\n                        <fkt-badge text="Orange" color="orange" variant="opaque" />\n                    </div>\n                </div>\n                <div class="container__item">\n                    <h2>Faded Variant</h2>\n                    <div>\n                        <fkt-badge text="Green" color="green" variant="faded" />\n                        <fkt-badge text="Red" color="red" variant="faded" />\n                        <fkt-badge text="Blue" color="blue" variant="faded" />\n                        <fkt-badge text="Orange" color="orange" variant="faded" />\n                    </div>\n                </div>\n            </div>\n        '}),args:{color:"blue"}},CountBadge={parameters:{docs:{description:{story:"Numerical badges perfect for displaying counts, quantities, and numbers."}}},args:{text:"5",color:"blue",variant:"opaque"}},StatusBadge={parameters:{docs:{moduleImportName:"badge",description:{story:"Status indicators for workflow states, item conditions, and process stages."}}},args:{text:"Online",color:"green",variant:"opaque"}},PriorityBadge={parameters:{docs:{description:{story:"Priority indicators for tasks, issues, and items requiring attention levels."}}},args:{text:"High Priority",color:"red",variant:"opaque"}},CategoryBadge={parameters:{docs:{description:{story:"Category and classification badges for organizing and labeling content."}}},args:{text:"Electronics",color:"blue",variant:"faded"}},LongTextBadge={parameters:{docs:{description:{story:"Badges with longer text content demonstrating text handling and wrapping."}}},args:{text:"Very Long Category Name",color:"blue",variant:"faded"}},fkt_badge_stories=meta,__namedExportsOrder=["SuccessBadge","ErrorBadge","WarningBadge","InfoBadge","BadgeVariations","CountBadge","StatusBadge","PriorityBadge","CategoryBadge","LongTextBadge"];SuccessBadge.parameters={...SuccessBadge.parameters,docs:{...SuccessBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"A standard badge with success state and opaque styling, perfect for status indicators.\"\n      }\n    }\n  },\n  args: {\n    text: 'Success',\n    color: 'green',\n    variant: 'opaque'\n  }\n}",...SuccessBadge.parameters?.docs?.source}}},ErrorBadge.parameters={...ErrorBadge.parameters,docs:{...ErrorBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Badge showing error state with red color for urgent attention.\"\n      }\n    }\n  },\n  args: {\n    text: 'Error',\n    color: 'red',\n    variant: 'opaque'\n  }\n}",...ErrorBadge.parameters?.docs?.source}}},WarningBadge.parameters={...WarningBadge.parameters,docs:{...WarningBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Badge with orange color for warnings and pending states that need attention.\"\n      }\n    }\n  },\n  args: {\n    text: 'Warning',\n    color: 'orange',\n    variant: 'opaque'\n  }\n}",...WarningBadge.parameters?.docs?.source}}},InfoBadge.parameters={...InfoBadge.parameters,docs:{...InfoBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Badge with blue color for informational content and faded variant for subtle display.\"\n      }\n    }\n  },\n  args: {\n    text: 'Info',\n    color: 'blue',\n    variant: 'faded'\n  }\n}",...InfoBadge.parameters?.docs?.source}}},BadgeVariations.parameters={...BadgeVariations.parameters,docs:{...BadgeVariations.parameters?.docs,source:{originalSource:'{\n  parameters: {\n    docs: {\n      description: {\n        story: "Comprehensive showcase of all available colors and variants, demonstrating the full range of badge styling options."\n      }\n    }\n  },\n  render: args => ({\n    props: args,\n    styles: [`\n            .container {\n                display: flex;\n                flex-direction: column;\n                gap: var(--space-md);\n            }\n\n            .container__item {\n                display: flex;\n                flex-direction: column;\n                gap: var(--space-xs);\n            }\n\n            .container__item h2 {\n                font-size: var(--font-size-lg);\n                font-weight: var(--font-semibold);\n                border-bottom: solid 1px var(--color-gray-200);\n                padding-bottom: var(--space-3xs);\n            }\n\n            .container__item > div {\n                display: flex;\n                align-items: center;\n                gap: var(--space-xs);\n                flex-wrap: wrap;\n            }\n        `],\n    template: `\n            <div class="container">\n                <div class="container__item">\n                    <h2>Opaque Variant</h2>\n                    <div>\n                        <fkt-badge text="Green" [color]="color" variant="opaque" />\n                        <fkt-badge text="Red" color="red" variant="opaque" />\n                        <fkt-badge text="Blue" color="blue" variant="opaque" />\n                        <fkt-badge text="Orange" color="orange" variant="opaque" />\n                    </div>\n                </div>\n                <div class="container__item">\n                    <h2>Faded Variant</h2>\n                    <div>\n                        <fkt-badge text="Green" color="green" variant="faded" />\n                        <fkt-badge text="Red" color="red" variant="faded" />\n                        <fkt-badge text="Blue" color="blue" variant="faded" />\n                        <fkt-badge text="Orange" color="orange" variant="faded" />\n                    </div>\n                </div>\n            </div>\n        `\n  }),\n  args: {\n    color: "blue"\n  }\n}',...BadgeVariations.parameters?.docs?.source}}},CountBadge.parameters={...CountBadge.parameters,docs:{...CountBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Numerical badges perfect for displaying counts, quantities, and numbers.\"\n      }\n    }\n  },\n  args: {\n    text: '5',\n    color: 'blue',\n    variant: 'opaque'\n  }\n}",...CountBadge.parameters?.docs?.source}}},StatusBadge.parameters={...StatusBadge.parameters,docs:{...StatusBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      moduleImportName: \"badge\",\n      description: {\n        story: \"Status indicators for workflow states, item conditions, and process stages.\"\n      }\n    }\n  },\n  args: {\n    text: 'Online',\n    color: 'green',\n    variant: 'opaque'\n  }\n}",...StatusBadge.parameters?.docs?.source}}},PriorityBadge.parameters={...PriorityBadge.parameters,docs:{...PriorityBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Priority indicators for tasks, issues, and items requiring attention levels.\"\n      }\n    }\n  },\n  args: {\n    text: 'High Priority',\n    color: 'red',\n    variant: 'opaque'\n  }\n}",...PriorityBadge.parameters?.docs?.source}}},CategoryBadge.parameters={...CategoryBadge.parameters,docs:{...CategoryBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Category and classification badges for organizing and labeling content.\"\n      }\n    }\n  },\n  args: {\n    text: 'Electronics',\n    color: 'blue',\n    variant: 'faded'\n  }\n}",...CategoryBadge.parameters?.docs?.source}}},LongTextBadge.parameters={...LongTextBadge.parameters,docs:{...LongTextBadge.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    docs: {\n      description: {\n        story: \"Badges with longer text content demonstrating text handling and wrapping.\"\n      }\n    }\n  },\n  args: {\n    text: 'Very Long Category Name',\n    color: 'blue',\n    variant: 'faded'\n  }\n}",...LongTextBadge.parameters?.docs?.source}}}},"./node_modules/.pnpm/css-loader@7.1.2_webpack@5.101.2_esbuild@0.25.9_/node_modules/css-loader/dist/runtime/api.js":module=>{"use strict";module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map(function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content}).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/.pnpm/css-loader@7.1.2_webpack@5.101.2_esbuild@0.25.9_/node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{"use strict";module.exports=function(i){return i[1]}}}]);