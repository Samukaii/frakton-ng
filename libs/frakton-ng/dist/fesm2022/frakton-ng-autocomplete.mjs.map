{"version":3,"file":"frakton-ng-autocomplete.mjs","sources":["../../autocomplete/src/static/autocomplete-auto-created-option.ts","../../autocomplete/src/options/fkt-autocomplete-options.component.ts","../../autocomplete/src/options/fkt-autocomplete-options.component.html","../../autocomplete/src/fkt-autocomplete.component.ts","../../autocomplete/src/fkt-autocomplete.component.html","../../autocomplete/public-api.ts","../../autocomplete/frakton-ng-autocomplete.ts"],"sourcesContent":["export const AUTOCOMPLETE_AUTO_CREATED_OPTION = \"autocomplete-auto-created-option\";\r\n","import { Component, input, output } from '@angular/core';\r\nimport { FktSpinnerComponent } from 'frakton-ng/spinner';\r\nimport { FktNoResults, FktNoResultsComponent } from 'frakton-ng/no-results';\r\nimport { FktButtonsListComponent } from 'frakton-ng/buttons-list';\r\nimport { FktIconComponent } from 'frakton-ng/icon';\r\nimport { FktButtonAction } from 'frakton-ng/button';\r\nimport { FktAutocompleteOption } from '../fkt-autocomplete.types';\r\n\r\n@Component({\r\n\tselector: 'fkt-autocomplete-options',\r\n\timports: [\r\n\t\tFktIconComponent,\r\n\t\tFktSpinnerComponent,\r\n\t\tFktNoResultsComponent,\r\n\t\tFktButtonsListComponent,\r\n\t],\r\n\ttemplateUrl: './fkt-autocomplete-options.component.html',\r\n\tstyleUrl: './fkt-autocomplete-options.component.scss',\r\n\thost: {\r\n\t\tid: 'autocomplete-options-overlay',\r\n\t},\r\n})\r\nexport class FktAutocompleteOptionsComponent {\r\n\toptions = input.required<FktAutocompleteOption[]>();\r\n\tloading = input<boolean | undefined>(false);\r\n\tselected = input<string | number | null>();\r\n\tactions = input<FktButtonAction[]>([]);\r\n\tnoResults = input<FktNoResults | undefined>({\r\n\t\tlabel: 'Sem resultados',\r\n\t});\r\n\r\n\tselect = output<FktAutocompleteOption>();\r\n}\r\n","<ul class=\"overlay\">\r\n\t@if (loading()) {\r\n\t\t<div class=\"spinner-container\">\r\n\t\t\t<fkt-spinner/>\r\n\t\t</div>\r\n\t} @else {\r\n\t\t@for (option of options(); track option.value) {\r\n\t\t\t<li\r\n\t\t\t\t(click)=\"select.emit(option)\"\r\n\t\t\t>{{ option.label }}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t@if (option.value === selected()) {\r\n\t\t\t\t\t\t<fkt-icon\r\n\t\t\t\t\t\t\tname=\"check\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t<fkt-buttons-list\r\n\t\t\t\t\t\t(click)=\"$event.stopPropagation()\"\r\n\t\t\t\t\t\t[context]=\"option\"\r\n\t\t\t\t\t\t[actions]=\"actions()\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</li>\r\n\t\t} @empty {\r\n\t\t\t<fkt-no-results\r\n\t\t\t\t[noResults]=\"noResults()!\"\r\n\t\t\t/>\r\n\t\t}\r\n\t}\r\n</ul>\r\n","import { Component, computed, inject, input, output, viewChild, } from '@angular/core';\nimport { FktInputComponent } from 'frakton-ng/input';\nimport { FktOverlayRef, FktOverlayService } from 'frakton-ng/overlay';\nimport { SignalFormControl, SignalFormControlTransformer } from 'frakton-ng/forms';\nimport { FktButtonAction } from 'frakton-ng/button';\nimport { FktNoResults } from 'frakton-ng/no-results';\nimport { FktAutocompleteOption } from './fkt-autocomplete.types';\nimport { AUTOCOMPLETE_AUTO_CREATED_OPTION } from './static/autocomplete-auto-created-option';\nimport {FktAutocompleteOptionsComponent} from './options/fkt-autocomplete-options.component';\nimport { MarkUsed, outsideClickEffect } from 'frakton-ng/internal/utils';\n\n@Component({\n\tselector: 'fkt-autocomplete',\n\ttemplateUrl: './fkt-autocomplete.component.html',\n\tstyleUrl: './fkt-autocomplete.component.scss',\n\timports: [\n\t\tFktInputComponent\n\t]\n})\nexport class FktAutocompleteComponent {\n\tcontrol = input.required<SignalFormControl<any>>();\n\toptions = input<FktAutocompleteOption[]>([]);\n\tactions = input<FktButtonAction[]>([]);\n\tenableAutoCreation = input(false);\n\tnoResults = input<FktNoResults>({\n\t\tlabel: 'Sem resultados',\n\t});\n\tloading = input(false);\n\n\tplaceholder = input('');\n\tlabel = input('');\n\tsearch = output<string>();\n\n\tprivate overlayService = inject(FktOverlayService);\n\tprivate inputComponent = viewChild.required(FktInputComponent);\n\n\tprotected allOptions = computed(() => {\n\t\tconst viewValue = this.control().viewValue();\n\t\tconst enableAutoCreation = this.enableAutoCreation();\n\t\tconst options = this.options();\n\n\t\tif (!enableAutoCreation || !viewValue) return options;\n\n\t\tif (\n\t\t\t!!options.find(\n\t\t\t\toption =>\n\t\t\t\t\toption.label === viewValue || option.value === viewValue,\n\t\t\t)\n\t\t)\n\t\t\treturn options;\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: viewValue,\n\t\t\t\tvalue: AUTOCOMPLETE_AUTO_CREATED_OPTION,\n\t\t\t} as FktAutocompleteOption,\n\t\t\t...options,\n\t\t];\n\t});\n\n\ttransformer: SignalFormControlTransformer = value => {\n\t\tconst search: string = value;\n\n\t\tconst found = this.allOptions().find(\n\t\t\titem =>\n\t\t\t\titem.value.toString() === search ||\n\t\t\t\titem.label.toString() === search,\n\t\t);\n\n\t\tif (found)\n\t\t\treturn {\n\t\t\t\tmodelValue: found.value,\n\t\t\t\tviewValue: found.label,\n\t\t\t};\n\n\t\treturn {\n\t\t\tviewValue: value,\n\t\t\tmodelValue: null,\n\t\t};\n\t};\n\n\t@MarkUsed()\n\tprotected closeOverlayOnOutsideClick = outsideClickEffect(\n\t\t() => {\n\t\t\tthis.closeOverlay();\n\t\t},\n\t\t{ excludeIdsOrElements: ['autocomplete-options-overlay'] },\n\t);\n\n\tprotected openOverlay() {\n\t\tif (!!this.overlay || this.control().disabled()) return;\n\n\t\tthis.overlay = this.overlayService.open({\n\t\t\tanchorElementRef: this.inputComponent().element(),\n\t\t\tcomponent: FktAutocompleteOptionsComponent,\n\t\t\tdata: {\n\t\t\t\toptions: this.allOptions,\n\t\t\t\tloading: this.loading,\n\t\t\t\tactions: this.actions(),\n\t\t\t\tselected: computed(() => this.selectedOption()?.value ?? null),\n\t\t\t\tnoResults: this.noResults(),\n\t\t\t\tselect: option => {\n\t\t\t\t\tthis.selectOption(option);\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate overlay: null | FktOverlayRef<any> =\n\t\tnull;\n\n\tprotected selectedOption = computed(() => {\n\t\tconst value = this.control().value();\n\t\tconst found = this.allOptions().find(item => item.value === value);\n\n\t\treturn found ?? null;\n\t});\n\n\tprotected selectOption(option: FktAutocompleteOption) {\n\t\tthis.control().setValue({\n\t\t\tmodelValue: option.value,\n\t\t\tviewValue: option.label,\n\t\t});\n\n\t\tthis.closeOverlay();\n\t}\n\n\tprivate closeOverlay() {\n\t\tthis.overlay?.close();\n\t\tthis.overlay = null;\n\t}\n}\n","<fkt-input\r\n\t[control]=\"control()\"\r\n\t[spellcheck]=\"false\"\r\n\t[label]=\"label()\"\r\n\t[transformer]=\"transformer\"\r\n\t[placeholder]=\"placeholder()\"\r\n\t(click)=\"openOverlay()\"\r\n/>\r\n","/*\r\n\tPublic API Surface of components\r\n */\r\n\r\nexport * from './src/fkt-autocomplete.component';\r\nexport * from './src/fkt-autocomplete.types';\r\nexport * from './src/static/autocomplete-auto-created-option';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}