import * as i0 from '@angular/core';
import { input, computed, ChangeDetectionStrategy, Component } from '@angular/core';
import { FktIconComponent } from 'frakton-ng/icon';

class FktButtonComponent {
    loading = input(false, ...(ngDevMode ? [{ debugName: "loading" }] : []));
    disabled = input(false, ...(ngDevMode ? [{ debugName: "disabled" }] : []));
    text = input('', ...(ngDevMode ? [{ debugName: "text" }] : []));
    loadingText = input('', ...(ngDevMode ? [{ debugName: "loadingText" }] : []));
    color = input('primary', ...(ngDevMode ? [{ debugName: "color" }] : []));
    theme = input('raised', ...(ngDevMode ? [{ debugName: "theme" }] : []));
    variant = input('rounded', ...(ngDevMode ? [{ debugName: "variant" }] : []));
    icon = input(...(ngDevMode ? [undefined, { debugName: "icon" }] : []));
    iconPosition = input('right', ...(ngDevMode ? [{ debugName: "iconPosition" }] : []));
    classes = computed(() => {
        let classes = '';
        classes += `theme-${this.theme()}`;
        classes += ` color-${this.color()}`;
        if (this.variant())
            classes += ` variant-${this.variant()}`;
        if (!this.text())
            classes += ` icon-only`;
        return classes;
    }, ...(ngDevMode ? [{ debugName: "classes" }] : []));
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.2.3", ngImport: i0, type: FktButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.2.3", type: FktButtonComponent, isStandalone: true, selector: "fkt-button", inputs: { loading: { classPropertyName: "loading", publicName: "loading", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: true, isRequired: false, transformFunction: null }, text: { classPropertyName: "text", publicName: "text", isSignal: true, isRequired: false, transformFunction: null }, loadingText: { classPropertyName: "loadingText", publicName: "loadingText", isSignal: true, isRequired: false, transformFunction: null }, color: { classPropertyName: "color", publicName: "color", isSignal: true, isRequired: false, transformFunction: null }, theme: { classPropertyName: "theme", publicName: "theme", isSignal: true, isRequired: false, transformFunction: null }, variant: { classPropertyName: "variant", publicName: "variant", isSignal: true, isRequired: false, transformFunction: null }, icon: { classPropertyName: "icon", publicName: "icon", isSignal: true, isRequired: false, transformFunction: null }, iconPosition: { classPropertyName: "iconPosition", publicName: "iconPosition", isSignal: true, isRequired: false, transformFunction: null } }, ngImport: i0, template: "<button (click)=\"$event.preventDefault()\" [disabled]=\"disabled() || loading()\" [class]=\"classes()\">\r\n\t@if (loading()) {\r\n\t\t<div class=\"spinner\"></div>\r\n\t\t<p>{{ loadingText() || text() }}</p>\r\n\t} @else {\r\n\t\t<div\r\n\t\t\t[class.icon-left]=\"iconPosition() === 'left'\"\r\n\t\t\tclass=\"button-content\"\r\n\t\t>\r\n\t\t\t@let iconName = icon();\r\n\t\t\t@if (text()) {\r\n\t\t\t\t<p>{{ text() }}</p>\r\n\t\t\t}\r\n\t\t\t@if (iconName) {\r\n\t\t\t\t<fkt-icon [name]=\"iconName\"></fkt-icon>\r\n\t\t\t}\r\n\t\t</div>\r\n\t}\r\n</button>\r\n", styles: [":host{display:block;width:fit-content}p{margin:0;font-size:var(--font-size-md)}button{width:100%;display:flex;justify-content:center;cursor:pointer;border:none;background:none;font-family:inherit;font-size:inherit;outline:none}button:disabled{cursor:not-allowed}.button-content{display:flex;align-items:center;gap:var(--space-xs)}.button-content.icon-left{flex-direction:row-reverse}.spinner{width:20px;height:20px;border:2px solid #e5e7eb;border-top-color:currentColor;border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{to{transform:rotate(360deg)}}.theme-raised{transition:var(--transition-base);display:flex;gap:var(--space-xs);font-weight:var(--font-semibold);color:#fff;border:2px solid;padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);box-shadow:var(--shadow-md)}.theme-raised:disabled{opacity:.4;box-shadow:none}.theme-raised:disabled:hover{box-shadow:none}.theme-raised:hover:not(:disabled){box-shadow:var(--shadow-lg)}.theme-raised.variant-rounded.icon-only{padding:var(--space-xs)}.theme-raised.variant-rect{border-radius:var(--space-2xs)}.theme-raised.variant-rect.icon-only{padding:var(--space-xs)}.theme-raised.color-primary{background-color:var(--color-neutral-800);border-color:var(--color-neutral-800)}.theme-raised.color-primary:hover:not(:disabled){background-color:var(--color-neutral-700);border-color:var(--color-neutral-700)}.theme-raised.color-yellow{background-color:var(--color-yellow-500);border-color:var(--color-yellow-500);color:var(--color-neutral-800)}.theme-raised.color-yellow:hover:not(:disabled){background-color:var(--color-yellow-400);border-color:var(--color-yellow-400)}.theme-raised.color-yellow:disabled:hover{background-color:var(--color-yellow-600);border-color:var(--color-yellow-600)}.theme-raised.color-red{background-color:var(--color-red-600);border-color:var(--color-red-600)}.theme-raised.color-red:hover:not(:disabled){background-color:var(--color-red-500);border-color:var(--color-red-500)}.theme-raised.color-red:disabled:hover{background-color:var(--color-red-700);border-color:var(--color-red-700)}.theme-raised.color-green{background-color:var(--color-green-600);border-color:var(--color-green-600)}.theme-raised.color-green:hover:not(:disabled){background-color:var(--color-green-500);border-color:var(--color-green-500)}.theme-raised.color-green:disabled:hover{background-color:var(--color-green-700);border-color:var(--color-green-700)}.theme-stroked{transition:background-color .3s ease;display:flex;align-items:center;gap:var(--space-xs);font-weight:var(--font-semibold);border:2px solid;padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);background-color:transparent}.theme-stroked:disabled{opacity:.6;filter:grayscale(100%)}.theme-stroked.variant-rounded.icon-only{padding:var(--space-xs)}.theme-stroked.variant-rect{border-radius:var(--space-2xs)}.theme-stroked.variant-rect.icon-only{padding:var(--space-xs)}.theme-stroked.color-yellow{color:var(--color-yellow-500);border-color:var(--color-yellow-500)}.theme-stroked.color-yellow:hover:not(:disabled){background-color:var(--color-yellow-500);color:var(--color-neutral-100)}.theme-stroked.color-primary{color:var(--color-gray-800);border-color:var(--color-gray-800)}.theme-stroked.color-primary:hover:not(:disabled){background-color:var(--color-gray-800);color:var(--color-neutral-100)}.theme-stroked.color-red{color:var(--color-red-500);border-color:var(--color-red-500)}.theme-stroked.color-red:hover:not(:disabled){background-color:var(--color-red-500);color:var(--color-neutral-100)}.theme-stroked.color-green{color:var(--color-green-500);border-color:var(--color-green-500)}.theme-stroked.color-green:hover:not(:disabled){background-color:var(--color-green-500);color:var(--color-neutral-100)}.theme-basic{transition:var(--transition-base);display:flex;align-items:center;gap:var(--space-xs);font-weight:var(--font-semibold);padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);background-color:transparent;border:none}.theme-basic:hover:not(:disabled){background-color:#00000017}.theme-basic:disabled{opacity:.6;filter:grayscale(100%);background-color:var(--color-neutral-400)}.theme-basic:disabled:hover{background-color:var(--color-neutral-400)}.theme-basic.variant-rounded.icon-only{padding:var(--space-xs)}.theme-basic.variant-rect{border-radius:var(--space-2xs)}.theme-basic.variant-rect.icon-only{padding:var(--space-xs)}.theme-basic.color-yellow{color:var(--color-yellow-500)}.theme-basic.color-primary{color:var(--color-gray-800)}.theme-basic.color-red{color:var(--color-red-500)}.theme-basic.color-green{color:var(--color-green-500)}\n"], dependencies: [{ kind: "component", type: FktIconComponent, selector: "fkt-icon", inputs: ["name"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.2.3", ngImport: i0, type: FktButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'fkt-button', changeDetection: ChangeDetectionStrategy.OnPush, imports: [FktIconComponent], template: "<button (click)=\"$event.preventDefault()\" [disabled]=\"disabled() || loading()\" [class]=\"classes()\">\r\n\t@if (loading()) {\r\n\t\t<div class=\"spinner\"></div>\r\n\t\t<p>{{ loadingText() || text() }}</p>\r\n\t} @else {\r\n\t\t<div\r\n\t\t\t[class.icon-left]=\"iconPosition() === 'left'\"\r\n\t\t\tclass=\"button-content\"\r\n\t\t>\r\n\t\t\t@let iconName = icon();\r\n\t\t\t@if (text()) {\r\n\t\t\t\t<p>{{ text() }}</p>\r\n\t\t\t}\r\n\t\t\t@if (iconName) {\r\n\t\t\t\t<fkt-icon [name]=\"iconName\"></fkt-icon>\r\n\t\t\t}\r\n\t\t</div>\r\n\t}\r\n</button>\r\n", styles: [":host{display:block;width:fit-content}p{margin:0;font-size:var(--font-size-md)}button{width:100%;display:flex;justify-content:center;cursor:pointer;border:none;background:none;font-family:inherit;font-size:inherit;outline:none}button:disabled{cursor:not-allowed}.button-content{display:flex;align-items:center;gap:var(--space-xs)}.button-content.icon-left{flex-direction:row-reverse}.spinner{width:20px;height:20px;border:2px solid #e5e7eb;border-top-color:currentColor;border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{to{transform:rotate(360deg)}}.theme-raised{transition:var(--transition-base);display:flex;gap:var(--space-xs);font-weight:var(--font-semibold);color:#fff;border:2px solid;padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);box-shadow:var(--shadow-md)}.theme-raised:disabled{opacity:.4;box-shadow:none}.theme-raised:disabled:hover{box-shadow:none}.theme-raised:hover:not(:disabled){box-shadow:var(--shadow-lg)}.theme-raised.variant-rounded.icon-only{padding:var(--space-xs)}.theme-raised.variant-rect{border-radius:var(--space-2xs)}.theme-raised.variant-rect.icon-only{padding:var(--space-xs)}.theme-raised.color-primary{background-color:var(--color-neutral-800);border-color:var(--color-neutral-800)}.theme-raised.color-primary:hover:not(:disabled){background-color:var(--color-neutral-700);border-color:var(--color-neutral-700)}.theme-raised.color-yellow{background-color:var(--color-yellow-500);border-color:var(--color-yellow-500);color:var(--color-neutral-800)}.theme-raised.color-yellow:hover:not(:disabled){background-color:var(--color-yellow-400);border-color:var(--color-yellow-400)}.theme-raised.color-yellow:disabled:hover{background-color:var(--color-yellow-600);border-color:var(--color-yellow-600)}.theme-raised.color-red{background-color:var(--color-red-600);border-color:var(--color-red-600)}.theme-raised.color-red:hover:not(:disabled){background-color:var(--color-red-500);border-color:var(--color-red-500)}.theme-raised.color-red:disabled:hover{background-color:var(--color-red-700);border-color:var(--color-red-700)}.theme-raised.color-green{background-color:var(--color-green-600);border-color:var(--color-green-600)}.theme-raised.color-green:hover:not(:disabled){background-color:var(--color-green-500);border-color:var(--color-green-500)}.theme-raised.color-green:disabled:hover{background-color:var(--color-green-700);border-color:var(--color-green-700)}.theme-stroked{transition:background-color .3s ease;display:flex;align-items:center;gap:var(--space-xs);font-weight:var(--font-semibold);border:2px solid;padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);background-color:transparent}.theme-stroked:disabled{opacity:.6;filter:grayscale(100%)}.theme-stroked.variant-rounded.icon-only{padding:var(--space-xs)}.theme-stroked.variant-rect{border-radius:var(--space-2xs)}.theme-stroked.variant-rect.icon-only{padding:var(--space-xs)}.theme-stroked.color-yellow{color:var(--color-yellow-500);border-color:var(--color-yellow-500)}.theme-stroked.color-yellow:hover:not(:disabled){background-color:var(--color-yellow-500);color:var(--color-neutral-100)}.theme-stroked.color-primary{color:var(--color-gray-800);border-color:var(--color-gray-800)}.theme-stroked.color-primary:hover:not(:disabled){background-color:var(--color-gray-800);color:var(--color-neutral-100)}.theme-stroked.color-red{color:var(--color-red-500);border-color:var(--color-red-500)}.theme-stroked.color-red:hover:not(:disabled){background-color:var(--color-red-500);color:var(--color-neutral-100)}.theme-stroked.color-green{color:var(--color-green-500);border-color:var(--color-green-500)}.theme-stroked.color-green:hover:not(:disabled){background-color:var(--color-green-500);color:var(--color-neutral-100)}.theme-basic{transition:var(--transition-base);display:flex;align-items:center;gap:var(--space-xs);font-weight:var(--font-semibold);padding:var(--space-xs) var(--space-md);border-radius:var(--radius-full);background-color:transparent;border:none}.theme-basic:hover:not(:disabled){background-color:#00000017}.theme-basic:disabled{opacity:.6;filter:grayscale(100%);background-color:var(--color-neutral-400)}.theme-basic:disabled:hover{background-color:var(--color-neutral-400)}.theme-basic.variant-rounded.icon-only{padding:var(--space-xs)}.theme-basic.variant-rect{border-radius:var(--space-2xs)}.theme-basic.variant-rect.icon-only{padding:var(--space-xs)}.theme-basic.color-yellow{color:var(--color-yellow-500)}.theme-basic.color-primary{color:var(--color-gray-800)}.theme-basic.color-red{color:var(--color-red-500)}.theme-basic.color-green{color:var(--color-green-500)}\n"] }]
        }] });

const fktButtonVariants = ['rounded', 'rect'];
const fktButtonThemes = ['raised', 'stroked', 'basic'];

/**
 * Generated bundle index. Do not edit.
 */

export { FktButtonComponent, fktButtonThemes, fktButtonVariants };
//# sourceMappingURL=frakton-ng-button.mjs.map
