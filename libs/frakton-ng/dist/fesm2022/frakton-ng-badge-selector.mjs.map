{"version":3,"file":"frakton-ng-badge-selector.mjs","sources":["../../badge-selector/src/modal/badge-selector-modal.component.ts","../../badge-selector/src/modal/badge-selector-modal.component.html","../../badge-selector/src/fkt-badge-selector.component.ts","../../badge-selector/src/fkt-badge-selector.component.html","../../badge-selector/src/frakton-ng-badge-selector.ts"],"sourcesContent":["import { Component, input, output } from '@angular/core';\r\nimport { outsideClickEffect, MarkUsed } from 'frakton-ng/internal/utils';\r\nimport { FktIconComponent } from 'frakton-ng/icon';\r\nimport { FktBadgeComponent } from 'frakton-ng/badge';\r\nimport { FktBadge } from '../fkt-badge-selector.types';\r\n\r\n@Component({\r\n\tselector: 'fkt-badge-selector-modal',\r\n\timports: [FktBadgeComponent, FktIconComponent],\r\n\ttemplateUrl: './badge-selector-modal.component.html',\r\n\tstyleUrl: './badge-selector-modal.component.scss',\r\n})\r\nexport class BadgeSelectorModalComponent<Id extends string> {\r\n\toptions = input.required<FktBadge<Id>[]>();\r\n\tselected = input<FktBadge<Id>>();\r\n\tselect = output<FktBadge<Id>>();\r\n\tclose = output();\r\n\r\n\t@MarkUsed()\r\n\tprotected autoclose = outsideClickEffect(() => {\r\n\t\tthis.close.emit();\r\n\t});\r\n}\r\n","<div class=\"container\">\r\n\t<div class=\"container__first-row\">\r\n\t\t@for (option of options().slice(0, 3); track option.id) {\r\n\t\t\t<fkt-badge\r\n\t\t\t\tclass=\"container__badge\"\r\n\t\t\t\t(click)=\"select.emit(option)\"\r\n\t\t\t\t[color]=\"option.color\"\r\n\t\t\t>\r\n\t\t\t\t<div badge-content class=\"container__badge-content\">\r\n\t\t\t\t\t<p>{{ option.name }}</p>\r\n\r\n\t\t\t\t\t@if (option.id === selected()?.id) {\r\n\t\t\t\t\t\t<fkt-icon name=\"check\"/>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</fkt-badge>\r\n\t\t}\r\n\t</div>\r\n\r\n\t@let secondRowOptions = options().slice(3);\r\n\r\n\t@if (secondRowOptions.length) {\r\n\t\t<div class=\"container__second-row\">\r\n\t\t\t@for (option of secondRowOptions; track option.id) {\r\n\t\t\t\t<fkt-badge\r\n\t\t\t\t\tclass=\"container__badge\"\r\n\t\t\t\t\t(click)=\"select.emit(option)\"\r\n\t\t\t\t\t[color]=\"option.color\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<div badge-content class=\"container__badge-content\">\r\n\t\t\t\t\t\t<p>{{ option.name }}</p>\r\n\t\t\t\t\t\t@if (option.id === selected()?.id) {\r\n\t\t\t\t\t\t\t<fkt-icon name=\"check\"/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</fkt-badge>\r\n\t\t\t}\r\n\t\t</div>\r\n\t}\r\n\r\n</div>\r\n","import { Component, computed, ElementRef, inject, input, model, } from '@angular/core';\r\nimport { FktBadge } from './fkt-badge-selector.types';\r\nimport { FktOverlayRef, FktOverlayService } from 'frakton-ng/overlay';\r\nimport { BadgeSelectorModalComponent } from './modal/badge-selector-modal.component';\r\nimport { FktIconComponent } from 'frakton-ng/icon';\r\nimport { FktBadgeComponent } from 'frakton-ng/badge';\r\n\r\n\r\n@Component({\r\n\tselector: 'fkt-badge-selector',\r\n\timports: [FktBadgeComponent, FktIconComponent],\r\n\ttemplateUrl: './fkt-badge-selector.component.html',\r\n\tstyleUrl: './fkt-badge-selector.component.scss',\r\n})\r\nexport class FktBadgeSelectorComponent<Id extends string> {\r\n\toptions = input.required<FktBadge<Id>[]>();\r\n\tcurrentBadgeId = model<Id>();\r\n\r\n\tprivate overlay = inject(FktOverlayService);\r\n\r\n\tprivate ref: FktOverlayRef<BadgeSelectorModalComponent<Id>> | null =\r\n\t\tnull;\r\n\tprivate elementRef = inject(ElementRef);\r\n\r\n\tprotected selectedOption = computed(() => {\r\n\t\tconst currentBadgeId = this.currentBadgeId();\r\n\t\tconst options = this.options();\r\n\r\n\t\treturn options.find(option => option.id === currentBadgeId);\r\n\t});\r\n\r\n\tprotected select() {\r\n\t\tif (this.ref) return;\r\n\r\n\t\tthis.ref = this.overlay.open({\r\n\t\t\tcomponent: BadgeSelectorModalComponent<Id>,\r\n\t\t\tdata: {\r\n\t\t\t\toptions: this.options,\r\n\t\t\t\tselected: this.selectedOption,\r\n\t\t\t\tselect: badge => {\r\n\t\t\t\t\tthis.currentBadgeId.set(badge.id);\r\n\t\t\t\t\tthis.close();\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\tanchorElementRef: this.elementRef,\r\n\t\t\tpanelOptions: {\r\n\t\t\t\tposition: 'bottom-start',\r\n\t\t\t\tminWidth: 'fit-content',\r\n\t\t\t\twidth: 'fit-content',\r\n\t\t\t\tmaxHeight: 'fit-content',\r\n\t\t\t\toutsideClick: () => {\r\n\t\t\t\t\tthis.close();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\tprivate close() {\r\n\t\tthis.ref?.close();\r\n\t\tthis.ref = null;\r\n\t}\r\n}\r\n","@let selectedOptionValue = selectedOption();\r\n\r\n@if (selectedOptionValue) {\r\n\t<fkt-badge\r\n\t\tclass=\"badge\"\r\n\t\t(click)=\"select()\"\r\n\t\t[color]=\"selectedOptionValue.color\"\r\n\t>\r\n\t\t<div badge-content class=\"badge__content\">\r\n\t\t\t<p class=\"whitespace-nowrap\">\r\n\t\t\t\t{{ selectedOption()?.name }}\r\n\r\n\t\t\t</p>\r\n\t\t\t<fkt-icon\r\n\t\t\t\tname=\"chevron-down\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t</fkt-badge>\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}