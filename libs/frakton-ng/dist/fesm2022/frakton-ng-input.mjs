import * as i0 from '@angular/core';
import { input, contentChild, signal, computed, viewChild, ElementRef, ChangeDetectionStrategy, Component } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { FktFieldErrorComponent } from 'frakton-ng/field-error';
import { FormControlSuffixDirective, currencyTransformer, percentTransformer, hourTransformer, SignalFormControlDirective } from 'frakton-ng/forms';
import { NgTemplateOutlet } from '@angular/common';
import { FktButtonComponent } from 'frakton-ng/button';

class FktInputComponent {
    control = input.required(...(ngDevMode ? [{ debugName: "control" }] : []));
    label = input('', ...(ngDevMode ? [{ debugName: "label" }] : []));
    placeholder = input('', ...(ngDevMode ? [{ debugName: "placeholder" }] : []));
    inputPadding = input('.5rem 1rem', ...(ngDevMode ? [{ debugName: "inputPadding" }] : []));
    type = input('text', ...(ngDevMode ? [{ debugName: "type" }] : []));
    transformer = input(...(ngDevMode ? [undefined, { debugName: "transformer" }] : []));
    spellcheck = input(true, ...(ngDevMode ? [{ debugName: "spellcheck" }] : []));
    suffix = contentChild(FormControlSuffixDirective, ...(ngDevMode ? [{ debugName: "suffix" }] : []));
    showPassword = signal(false, ...(ngDevMode ? [{ debugName: "showPassword" }] : []));
    inputType = computed(() => {
        const type = this.type();
        const showPassword = this.showPassword();
        if (type !== 'password')
            return type;
        return showPassword ? 'text' : 'password';
    }, ...(ngDevMode ? [{ debugName: "inputType" }] : []));
    transformerValue = computed(() => {
        const transformer = this.transformer();
        if (transformer === 'currency')
            return currencyTransformer;
        if (transformer === 'percent')
            return percentTransformer;
        if (transformer === 'hour')
            return hourTransformer;
        return transformer;
    }, ...(ngDevMode ? [{ debugName: "transformerValue" }] : []));
    element = viewChild('input', ...(ngDevMode ? [{ debugName: "element", read: ElementRef }] : [{ read: ElementRef }]));
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.2.3", ngImport: i0, type: FktInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "20.2.3", type: FktInputComponent, isStandalone: true, selector: "fkt-input", inputs: { control: { classPropertyName: "control", publicName: "control", isSignal: true, isRequired: true, transformFunction: null }, label: { classPropertyName: "label", publicName: "label", isSignal: true, isRequired: false, transformFunction: null }, placeholder: { classPropertyName: "placeholder", publicName: "placeholder", isSignal: true, isRequired: false, transformFunction: null }, inputPadding: { classPropertyName: "inputPadding", publicName: "inputPadding", isSignal: true, isRequired: false, transformFunction: null }, type: { classPropertyName: "type", publicName: "type", isSignal: true, isRequired: false, transformFunction: null }, transformer: { classPropertyName: "transformer", publicName: "transformer", isSignal: true, isRequired: false, transformFunction: null }, spellcheck: { classPropertyName: "spellcheck", publicName: "spellcheck", isSignal: true, isRequired: false, transformFunction: null } }, queries: [{ propertyName: "suffix", first: true, predicate: FormControlSuffixDirective, descendants: true, isSignal: true }], viewQueries: [{ propertyName: "element", first: true, predicate: ["input"], descendants: true, read: ElementRef, isSignal: true }], ngImport: i0, template: "<div class=\"label-container\">\r\n\t<div\r\n\t\t[class.error]=\"!!error.message()\"\r\n\t\t[class.float]=\"control().viewValue()\"\r\n\t\t[class.disabled]=\"control().disabled()\"\r\n\t\taria-hidden=\"true\"\r\n\t\tclass=\"label-wrapper\">\r\n\t\t<label\r\n\t\t>{{ label() }}</label>\r\n\t</div>\r\n\r\n</div>\r\n\r\n<div class=\"input\">\r\n\t<input\r\n\t\t[spellcheck]=\"spellcheck() ? 'true' : 'false'\"\r\n\t\t[class.password]=\"type() === 'password'\"\r\n\t\t[class.error]=\"!!error.message()\"\r\n\t\t#input\r\n\t\t[type]=\"inputType()\"\r\n\t\t[style.padding]=\"inputPadding()\"\r\n\t\t[placeholder]=\"placeholder()\"\r\n\t\t[signalFormControl]=\"control()\"\r\n\t\t[attr.aria-label]=\"label()\"\r\n\t\t[transformer]=\"transformerValue()\"\r\n\t/>\r\n\r\n\t<div class=\"input__suffix\">\r\n\t\t@if (type() === \"password\") {\r\n\t\t\t<div class=\"input__suffix-password\">\r\n\t\t\t\t@if (showPassword()) {\r\n\t\t\t\t\t<fkt-button\r\n\t\t\t\t\t\t(click)=\"showPassword.set(false)\"\r\n\t\t\t\t\t\ttheme=\"basic\"\r\n\t\t\t\t\t\ticon=\"eye-slash\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t<fkt-button\r\n\t\t\t\t\t\t(click)=\"showPassword.set(true)\"\r\n\t\t\t\t\t\ttheme=\"basic\"\r\n\t\t\t\t\t\ticon=\"eye\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t} @else if (suffix()) {\r\n\t\t\t<div class=\"input__suffix-content\">\r\n\t\t\t\t<ng-container\r\n\t\t\t\t\t[ngTemplateOutlet]=\"suffix()!.templateRef\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t</div>\r\n\r\n</div>\r\n\r\n<fkt-field-error #error [control]=\"control()\"/>\r\n", styles: [":host{display:block;border-radius:var(--radius-md);position:relative;border-color:var(--color-neutral-800);transition:var(--transition-base);scroll-behavior:smooth;width:100%;margin-top:var(--space-xs)}:host .label-container{display:flex;gap:.5rem;align-items:center}:host .label-container .label-wrapper{position:absolute;pointer-events:none;padding:0 var(--space-3xs);font-size:var(--font-size-sm);left:.75rem;top:15px;transition:var(--transition-base);color:var(--color-neutral-500);background-color:var(--color-neutral-100)}:host .label-container .label-wrapper.disabled label{opacity:40%;filter:grayscale(1);cursor:not-allowed}:host .label-container .label-wrapper.error{color:var(--color-error)}:host .input{position:relative}:host .input input{border:solid 1px var(--color-border);box-sizing:border-box;outline:none;min-height:50px;font-size:var(--font-size-md);width:100%;border-radius:.5rem;padding:.5rem 1rem;background-color:transparent}:host .input input::placeholder{opacity:0;color:var(--color-neutral-500)}:host .input input:disabled{opacity:40%;filter:grayscale(1);cursor:not-allowed}:host .input input.error{border-color:var(--color-error)}:host .input input.password{padding-right:var(--space-3xl)}:host .input__suffix{position:absolute;pointer-events:none;top:0;width:100%;display:flex;align-items:center;justify-content:end;height:100%}:host .input__suffix-password{position:absolute;top:.5rem;right:.5rem;cursor:pointer}:host .input__suffix-password fkt-button{pointer-events:auto}:host .input__suffix-content{pointer-events:auto;margin-right:.5rem}:host:focus-within .label-container .label-wrapper{color:var(--color-brand-secondary);z-index:50;scale:90% 90%;translate:calc(var(--space-3xs) * -1) calc(var(--space-xl) * -1)}:host:focus-within .input input{transition:.15s cubic-bezier(.4,0,.2,1);border-color:var(--color-brand-secondary)}:host:focus-within .input input::placeholder{opacity:1}:host .float{z-index:50;scale:90% 90%;translate:calc(var(--space-3xs) * -1) calc(var(--space-xl) * -1)}:host fkt-field-error{padding-left:var(--space-sm)}\n"], dependencies: [{ kind: "ngmodule", type: ReactiveFormsModule }, { kind: "component", type: FktFieldErrorComponent, selector: "fkt-field-error", inputs: ["control"] }, { kind: "directive", type: SignalFormControlDirective, selector: "input[signalFormControl],textarea[signalFormControl]", inputs: ["signalFormControl", "transformer", "updateOn"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FktButtonComponent, selector: "fkt-button", inputs: ["loading", "disabled", "text", "loadingText", "color", "theme", "variant", "icon", "iconPosition"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.2.3", ngImport: i0, type: FktInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'fkt-input', imports: [
                        ReactiveFormsModule,
                        FktFieldErrorComponent,
                        SignalFormControlDirective,
                        NgTemplateOutlet,
                        FktButtonComponent,
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"label-container\">\r\n\t<div\r\n\t\t[class.error]=\"!!error.message()\"\r\n\t\t[class.float]=\"control().viewValue()\"\r\n\t\t[class.disabled]=\"control().disabled()\"\r\n\t\taria-hidden=\"true\"\r\n\t\tclass=\"label-wrapper\">\r\n\t\t<label\r\n\t\t>{{ label() }}</label>\r\n\t</div>\r\n\r\n</div>\r\n\r\n<div class=\"input\">\r\n\t<input\r\n\t\t[spellcheck]=\"spellcheck() ? 'true' : 'false'\"\r\n\t\t[class.password]=\"type() === 'password'\"\r\n\t\t[class.error]=\"!!error.message()\"\r\n\t\t#input\r\n\t\t[type]=\"inputType()\"\r\n\t\t[style.padding]=\"inputPadding()\"\r\n\t\t[placeholder]=\"placeholder()\"\r\n\t\t[signalFormControl]=\"control()\"\r\n\t\t[attr.aria-label]=\"label()\"\r\n\t\t[transformer]=\"transformerValue()\"\r\n\t/>\r\n\r\n\t<div class=\"input__suffix\">\r\n\t\t@if (type() === \"password\") {\r\n\t\t\t<div class=\"input__suffix-password\">\r\n\t\t\t\t@if (showPassword()) {\r\n\t\t\t\t\t<fkt-button\r\n\t\t\t\t\t\t(click)=\"showPassword.set(false)\"\r\n\t\t\t\t\t\ttheme=\"basic\"\r\n\t\t\t\t\t\ticon=\"eye-slash\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t} @else {\r\n\t\t\t\t\t<fkt-button\r\n\t\t\t\t\t\t(click)=\"showPassword.set(true)\"\r\n\t\t\t\t\t\ttheme=\"basic\"\r\n\t\t\t\t\t\ticon=\"eye\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t} @else if (suffix()) {\r\n\t\t\t<div class=\"input__suffix-content\">\r\n\t\t\t\t<ng-container\r\n\t\t\t\t\t[ngTemplateOutlet]=\"suffix()!.templateRef\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t}\r\n\t</div>\r\n\r\n</div>\r\n\r\n<fkt-field-error #error [control]=\"control()\"/>\r\n", styles: [":host{display:block;border-radius:var(--radius-md);position:relative;border-color:var(--color-neutral-800);transition:var(--transition-base);scroll-behavior:smooth;width:100%;margin-top:var(--space-xs)}:host .label-container{display:flex;gap:.5rem;align-items:center}:host .label-container .label-wrapper{position:absolute;pointer-events:none;padding:0 var(--space-3xs);font-size:var(--font-size-sm);left:.75rem;top:15px;transition:var(--transition-base);color:var(--color-neutral-500);background-color:var(--color-neutral-100)}:host .label-container .label-wrapper.disabled label{opacity:40%;filter:grayscale(1);cursor:not-allowed}:host .label-container .label-wrapper.error{color:var(--color-error)}:host .input{position:relative}:host .input input{border:solid 1px var(--color-border);box-sizing:border-box;outline:none;min-height:50px;font-size:var(--font-size-md);width:100%;border-radius:.5rem;padding:.5rem 1rem;background-color:transparent}:host .input input::placeholder{opacity:0;color:var(--color-neutral-500)}:host .input input:disabled{opacity:40%;filter:grayscale(1);cursor:not-allowed}:host .input input.error{border-color:var(--color-error)}:host .input input.password{padding-right:var(--space-3xl)}:host .input__suffix{position:absolute;pointer-events:none;top:0;width:100%;display:flex;align-items:center;justify-content:end;height:100%}:host .input__suffix-password{position:absolute;top:.5rem;right:.5rem;cursor:pointer}:host .input__suffix-password fkt-button{pointer-events:auto}:host .input__suffix-content{pointer-events:auto;margin-right:.5rem}:host:focus-within .label-container .label-wrapper{color:var(--color-brand-secondary);z-index:50;scale:90% 90%;translate:calc(var(--space-3xs) * -1) calc(var(--space-xl) * -1)}:host:focus-within .input input{transition:.15s cubic-bezier(.4,0,.2,1);border-color:var(--color-brand-secondary)}:host:focus-within .input input::placeholder{opacity:1}:host .float{z-index:50;scale:90% 90%;translate:calc(var(--space-3xs) * -1) calc(var(--space-xl) * -1)}:host fkt-field-error{padding-left:var(--space-sm)}\n"] }]
        }] });

const fktInputTypes = ['text', 'password', 'number', 'email'];
const fktInputTransformers = ['currency', 'percent', 'hour'];

/**
 * Generated bundle index. Do not edit.
 */

export { FktInputComponent, fktInputTransformers, fktInputTypes };
//# sourceMappingURL=frakton-ng-input.mjs.map
